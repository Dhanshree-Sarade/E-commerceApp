//
//package com.ecommerce.backend.services;
//
//import com.ecommerce.backend.entity.Product;
//import com.ecommerce.backend.repository.ProductRepository;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Service;
//import org.springframework.web.multipart.MultipartFile;
//
//import java.io.IOException;
//import java.nio.file.Files;
//import java.nio.file.Path;
//import java.nio.file.Paths;
//import java.util.List;
//import java.util.Optional;
//
//@Service
//public class ProductService {
//
//    @Autowired
//    private ProductRepository productRepository;
//
//    private final String UPLOAD_DIR = "uploads/";
//
//    public Optional<Product> getProductById(Long id) {
//        return productRepository.findById(id);
//    }
//
//    public List<Product> getAllProducts() {
//        return productRepository.findAll();
//    }
//
//    public Product createProduct(Product product, MultipartFile imageFile) throws IOException {
//        if (imageFile != null && !imageFile.isEmpty()) {
//            String fileName = imageFile.getOriginalFilename();
//            String imageUrl = saveImage(imageFile, fileName);
//            product.setImageUrl(imageUrl);
//        }
//
//        if (product.getQuantity() > 0) {
//            product.setStock(true);
//        } else {
//            product.setStock(false);
//        }
//
//        return productRepository.save(product);
//    }
//
//    private String saveImage(MultipartFile imageFile, String fileName) throws IOException {
//        Path uploadPath = Paths.get(UPLOAD_DIR);
//        if (!Files.exists(uploadPath)) {
//            Files.createDirectories(uploadPath);
//        }
//        Path filePath = uploadPath.resolve(fileName);
//        imageFile.transferTo(filePath);
//        return   "/uploads/" + fileName;
//    }
//
//    public Optional<Product> updateProduct(Long id, Product updatedProduct) {
//        Optional<Product> optionalProduct = productRepository.findById(id);
//        if (optionalProduct.isPresent()) {
//            updatedProduct.setId(id);
//            return Optional.of(productRepository.save(updatedProduct));
//        }
//        return Optional.empty();
//    }
//    
//
//    public boolean deleteProductById(Long id) {
//        Optional<Product> optionalProduct = productRepository.findById(id);
//        if (optionalProduct.isPresent()) {
//            productRepository.deleteById(id);
//            return true;
//        }
//        return false;
//    }
//}
//

package com.ecommerce.backend.services;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.stereotype.Service;
import org.springframework.util.FileSystemUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

@Service
public class   ProductService {

    private final Path uploadPath = Paths.get("Resource/static/uploads");

    public void init() {
        try {
            Files.createDirectories(uploadPath);
        } catch (IOException e) {
            throw new RuntimeException("Could not initialize upload directory!", e);
        }
    }

    public String saveImage(MultipartFile file) {
        try {
            if (file.isEmpty()) {
                throw new RuntimeException("Failed to store empty file");
            }

            String originalFilename = file.getOriginalFilename();
            Path destinationPath = this.uploadPath.resolve(originalFilename);
            Files.copy(file.getInputStream(), destinationPath);

            return destinationPath.toString(); // This can be a relative path if needed
        } catch (IOException e) {
            throw new RuntimeException("Failed to store file", e);
        }
    }

    public Resource loadImage(String filename) {
        try {
            Path file = uploadPath.resolve(filename);
            Resource resource = new UrlResource(file.toUri());

            if (resource.exists() || resource.isReadable()) {
                return resource;
            } else {
                throw new RuntimeException("Could not read the file!");
            }
        } catch (MalformedURLException e) {
            throw new RuntimeException("Error: " + e.getMessage());
        }
    }

    public void deleteAll() {
        FileSystemUtils.deleteRecursively(uploadPath.toFile());
    }

    public void deleteFile(String filename) {
        try {
            Path file = uploadPath.resolve(filename);
            Files.deleteIfExists(file);
        } catch (IOException e) {
            throw new RuntimeException("Could not delete the file: " + filename, e);
        }
    }
}

