//
//package com.ecommerce.backend.services;
//
//import com.ecommerce.backend.entity.Product;
//import com.ecommerce.backend.repository.ProductRepository;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Service;
//import org.springframework.web.multipart.MultipartFile;
//
//import java.io.IOException;
//import java.nio.file.Files;
//import java.nio.file.Path;
//import java.nio.file.Paths;
//import java.util.List;
//import java.util.Optional;
//
//@Service
//public class ProductService {
//
//    @Autowired
//    private ProductRepository productRepository;
//
//    private final String UPLOAD_DIR = "uploads/";
//
//    public Optional<Product> getProductById(Long id) {
//        return productRepository.findById(id);
//    }
//
//    public List<Product> getAllProducts() {
//        return productRepository.findAll();
//    }
//
//    public Product createProduct(Product product, MultipartFile imageFile) throws IOException {
//        if (imageFile != null && !imageFile.isEmpty()) {
//            String fileName = imageFile.getOriginalFilename();
//            String imageUrl = saveImage(imageFile, fileName);
//            product.setImageUrl(imageUrl);
//        }
//
//        if (product.getQuantity() > 0) {
//            product.setStock(true);
//        } else {
//            product.setStock(false);
//        }
//
//        return productRepository.save(product);
//    }
//
//    private String saveImage(MultipartFile imageFile, String fileName) throws IOException {
//        Path uploadPath = Paths.get(UPLOAD_DIR);
//        if (!Files.exists(uploadPath)) {
//            Files.createDirectories(uploadPath);
//        }
//        Path filePath = uploadPath.resolve(fileName);
//        imageFile.transferTo(filePath);
//        return   "/uploads/" + fileName;
//    }
//
//    public Optional<Product> updateProduct(Long id, Product updatedProduct) {
//        Optional<Product> optionalProduct = productRepository.findById(id);
//        if (optionalProduct.isPresent()) {
//            updatedProduct.setId(id);
//            return Optional.of(productRepository.save(updatedProduct));
//        }
//        return Optional.empty();
//    }
//    
//
//    public boolean deleteProductById(Long id) {
//        Optional<Product> optionalProduct = productRepository.findById(id);
//        if (optionalProduct.isPresent()) {
//            productRepository.deleteById(id);
//            return true;
//        }
//        return false;
//    }
//}
//
package com.ecommerce.backend.services;

import com.ecommerce.backend.entity.Product;
import com.ecommerce.backend.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Optional;

@Service
public class ProductService {

    @Autowired
    private ProductRepository productRepository;

    private final String UPLOAD_DIR = "src/main/resources/static/uploads/";

    public Optional<Product> getProductById(Long id) {
        return productRepository.findById(id);
    }

    public List<Product> getAllProducts() {
        return productRepository.findAll();
    }

    public Product createProduct(Product product, MultipartFile imageFile) throws IOException {
        if (imageFile != null && !imageFile.isEmpty()) {
            String fileName = StringUtils.cleanPath(imageFile.getOriginalFilename());
            String imageUrl = saveImage(product.getId(), imageFile);
            product.setImageUrl(imageUrl);
        }

        if (product.getQuantity() > 0) {
            product.setStock(true);
        } else {
            product.setStock(false);
        }

        return productRepository.save(product);
    }

    private String saveImage(Long productId, MultipartFile imageFile) throws IOException {
        Path uploadPath = Paths.get(UPLOAD_DIR, productId.toString());

        // Create the directory if it doesn't exist
        if (!Files.exists(uploadPath)) {
            Files.createDirectories(uploadPath);
        }

        // Generate a unique file name to avoid overwriting
        String fileName = StringUtils.cleanPath(imageFile.getOriginalFilename());
        String uniqueFileName = System.currentTimeMillis() + "_" + fileName;
        Path filePath = uploadPath.resolve(uniqueFileName);

        // Transfer the file to the upload path
        imageFile.transferTo(filePath);

        // Return the relative URL of the uploaded image
        return "/uploads/" + productId + "/" + uniqueFileName;
    }

    public Optional<Product> updateProduct(Long id, Product updatedProduct) {
        Optional<Product> optionalProduct = productRepository.findById(id);
        if (optionalProduct.isPresent()) {
            updatedProduct.setId(id);
            return Optional.of(productRepository.save(updatedProduct));
        }
        return Optional.empty();
    }

    public boolean deleteProductById(Long id) {
        Optional<Product> optionalProduct = productRepository.findById(id);
        if (optionalProduct.isPresent()) {
            productRepository.deleteById(id);
            // Delete associated image files if needed
            deleteProductImageFiles(id);
            return true;
        }
        return false;
    }

    private void deleteProductImageFiles(Long productId) {
        Path productDirectory = Paths.get(UPLOAD_DIR, productId.toString());
        if (Files.exists(productDirectory)) {
            try {
                Files.walk(productDirectory)
                        .filter(Files::isRegularFile)
                        .map(Path::toFile)
                        .forEach(File::delete);
                Files.deleteIfExists(productDirectory);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}


